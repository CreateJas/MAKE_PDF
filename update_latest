import tkinter as tk
from tkinter import filedialog, messagebox, Label, Canvas, Scrollbar, ttk, IntVar, simpledialog
from PIL import Image, ImageTk, ImageFilter
import logging
import os
from pdf2docx import Converter
from PyPDF2 import PdfMerger
import easyocr
from transformers import pipeline
import fitz  # Import fitz from PyMuPDF

class IntroPage(tk.Frame):
    def __init__(self, master, on_start, **kwargs):
        super().__init__(master, **kwargs)
        self.on_start = on_start
        self.create_widgets()

    def create_widgets(self):
        welcome_label = Label(self, text="Image to PDF & PDF to Word Converter", font=("Arial", 24, "bold"), fg="midnight blue")
        welcome_label.pack(pady=20)

        intro_label = Label(self, text="Convert images to PDF and PDF files to Word with ease.", fg="royal blue")
        intro_label.pack(pady=10)

        start_button = tk.Button(self, text="Get Started", command=self.on_start, bg="#800000", fg="white", font=("Arial", 14, "bold"))
        start_button.pack(pady=30)


class ImageToPDFConverter(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title('Image to PDF and PDF to Word Converter')
        self.geometry('800x600')
        self.filenames = []
        self.images = []
        self.image_widgets = {}
        self.initialize_ai_model()  # Ensure this call is made here
        self.setup_tabs()

        self.intro_page = IntroPage(self, on_start=self.setup_main_page, padx=20, pady=20)
        self.intro_page.pack(expand=True, fill=tk.BOTH)

    def setup_main_page(self):
        self.intro_page.pack_forget()

        self.notebook = ttk.Notebook(self)

        self.tab_images_to_pdf = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_images_to_pdf, text="Images to PDF")
        self.setup_images_to_pdf_tab()

        self.tab_pdf_to_word = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_pdf_to_word, text="PDF to Word")
        self.setup_pdf_to_word_tab()

        self.tab_ocr = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_ocr, text="OCR")
        self.setup_ocr_tab()

        self.tab_photo_editing = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_photo_editing, text="Photo Editing")
        self.setup_photo_editing_tab()

        self.tab_pdf_merger = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_pdf_merger, text="PDF Merger")
        self.setup_pdf_merger_tab()

        self.tab_ask_pdf_ai = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_ask_pdf_ai, text="Ask PDF AI")
        self.setup_ask_pdf_ai_tab()

        self.notebook.pack(expand=True, fill=tk.BOTH)
    
    def setup_tabs(self):
        self.notebook = ttk.Notebook(self)

        self.tab_images_to_pdf = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_images_to_pdf, text="Images to PDF")
        self.setup_images_to_pdf_tab()

        self.tab_pdf_to_word = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_pdf_to_word, text="PDF to Word")
        self.setup_pdf_to_word_tab()

        self.tab_ocr = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_ocr, text="OCR")
        self.setup_ocr_tab()

        self.tab_photo_editing = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_photo_editing, text="Photo Editing")
        self.setup_photo_editing_tab()

        self.tab_pdf_merger = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_pdf_merger, text="PDF Merger")
        self.setup_pdf_merger_tab()

        self.tab_ask_pdf_ai = ttk.Frame(self.notebook)
        self.notebook.add(self.tab_ask_pdf_ai, text="Ask PDF AI")
        self.setup_ask_pdf_ai_tab()

        self.notebook.pack(expand=True, fill=tk.BOTH)


    def setup_images_to_pdf_tab(self):
        label = Label(self.tab_images_to_pdf, text="Select multiple images to convert to PDF", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_button = tk.Button(self.tab_images_to_pdf, text="Select Images", command=self.select_files, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_button.pack(fill=tk.X, padx=20, pady=10)

        convert_button = tk.Button(self.tab_images_to_pdf, text="Convert to PDF", command=self.convert_to_pdf, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        convert_button.pack(fill=tk.X, padx=20, pady=10)

        self.canvas_images_to_pdf = Canvas(self.tab_images_to_pdf, borderwidth=2, relief="ridge", height=400, bg="black")
        self.canvas_images_to_pdf.pack(fill=tk.BOTH, expand=True)
        self.scrollbar_images_to_pdf = Scrollbar(self.tab_images_to_pdf, orient="horizontal", command=self.canvas_images_to_pdf.xview)
        self.scrollbar_images_to_pdf.pack(fill=tk.X)
        self.canvas_images_to_pdf.configure(xscrollcommand=self.scrollbar_images_to_pdf.set)

    def setup_pdf_to_word_tab(self):
        label = Label(self.tab_pdf_to_word, text="Select a PDF file to convert to Word", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_pdf_button = tk.Button(self.tab_pdf_to_word, text="Select PDF", command=self.select_pdf_file, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_pdf_button.pack(fill=tk.X, padx=20, pady=10)

        convert_pdf_to_word_button = tk.Button(self.tab_pdf_to_word, text="Convert PDF to Word", command=self.convert_pdf_to_word, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        convert_pdf_to_word_button.pack(fill=tk.X, padx=20, pady=10)

    def setup_ocr_tab(self):
        label = Label(self.tab_ocr, text="Select images for OCR (Optical Character Recognition)", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_ocr_button = tk.Button(self.tab_ocr, text="Select Images", command=self.select_ocr_files, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_ocr_button.pack(fill=tk.X, padx=20, pady=10)

        ocr_button = tk.Button(self.tab_ocr, text="Perform OCR", command=self.perform_ocr, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        ocr_button.pack(fill=tk.X, padx=20, pady=10)

    def setup_photo_editing_tab(self):
        self.selected_filters = []
        label = Label(self.tab_photo_editing, text="Select images for Photo Editing", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_photo_button = tk.Button(self.tab_photo_editing, text="Select Images", command=self.select_photo_files, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_photo_button.pack(fill=tk.X, padx=20, pady=10)

        filter_frame = tk.Frame(self.tab_photo_editing)
        filter_frame.pack(padx=20, pady=10)

        self.blur_var = IntVar()
        self.contour_var = IntVar()
        self.detail_var = IntVar()
        self.edge_var = IntVar()
        self.sharpen_var = IntVar()
        self.grayscale_var = IntVar()

        blur_check = tk.Checkbutton(filter_frame, text="Blur", variable=self.blur_var, onvalue=1, offvalue=0)
        blur_check.grid(row=0, column=0, sticky=tk.W)

        contour_check = tk.Checkbutton(filter_frame, text="Contour", variable=self.contour_var, onvalue=1, offvalue=0)
        contour_check.grid(row=0, column=1, sticky=tk.W)

        detail_check = tk.Checkbutton(filter_frame, text="Detail", variable=self.detail_var, onvalue=1, offvalue=0)
        detail_check.grid(row=1, column=0, sticky=tk.W)

        edge_check = tk.Checkbutton(filter_frame, text="Edge Enhance", variable=self.edge_var, onvalue=1, offvalue=0)
        edge_check.grid(row=1, column=1, sticky=tk.W)

        sharpen_check = tk.Checkbutton(filter_frame, text="Sharpen", variable=self.sharpen_var, onvalue=1, offvalue=0)
        sharpen_check.grid(row=2, column=0, sticky=tk.W)

        grayscale_check = tk.Checkbutton(filter_frame, text="Grayscale", variable=self.grayscale_var, onvalue=1, offvalue=0)
        grayscale_check.grid(row=2, column=1, sticky=tk.W)

        apply_filters_button = tk.Button(self.tab_photo_editing, text="Apply Filters", command=self.apply_filters, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        apply_filters_button.pack(fill=tk.X, padx=20, pady=10)
        

    def setup_pdf_merger_tab(self):
        label = Label(self.tab_pdf_merger, text="Select PDF files to merge", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_pdf_merger_button = tk.Button(self.tab_pdf_merger, text="Select PDFs", command=self.select_pdf_files_to_merge, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_pdf_merger_button.pack(fill=tk.X, padx=20, pady=10)

        merge_pdf_button = tk.Button(self.tab_pdf_merger, text="Merge PDFs", command=self.merge_pdfs, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        merge_pdf_button.pack(fill=tk.X, padx=20, pady=10)

    def setup_ask_pdf_ai_tab(self):
        label = Label(self.tab_ask_pdf_ai, text="Ask questions about a PDF using AI", fg="midnight blue", font=("Arial", 16, "bold"))
        label.pack(pady=10)

        select_pdf_button = tk.Button(self.tab_ask_pdf_ai, text="Select PDF", command=self.select_pdf_file_for_ai, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        select_pdf_button.pack(fill=tk.X, padx=20, pady=10)

        ask_question_button = tk.Button(self.tab_ask_pdf_ai, text="Ask Question", command=self.ask_pdf_question, bg="royal blue", fg="white", font=("Arial", 12, "bold"))
        ask_question_button.pack(fill=tk.X, padx=20, pady=10)

    def select_files(self):
        filetypes = (('Image files', '*.jpeg;*.jpg;*.png;*.bmp;*.gif'), ('All files', '*.*'))
        filenames = filedialog.askopenfilenames(title='Select images', filetypes=filetypes)
        if filenames:
            self.filenames.extend(filenames)
            messagebox.showinfo("Files Selected", f"{len(filenames)} files selected.")
            logging.info(f"Selected files: {self.filenames}")
            self.preview_images_to_pdf()
        else:
            messagebox.showinfo("No Files Selected", "Please select at least one image file.")

    def select_ocr_files(self):
        filetypes = (('Image files', '*.jpeg;*.jpg;*.png;*.bmp;*.gif'), ('All files', '*.*'))
        filenames = filedialog.askopenfilenames(title='Select images for OCR', filetypes=filetypes)
        if filenames:
            self.filenames.extend(filenames)
            messagebox.showinfo("Files Selected", f"{len(filenames)} files selected for OCR.")
            logging.info(f"Selected files for OCR: {self.filenames}")
        else:
            messagebox.showinfo("No Files Selected", "Please select at least one image file for OCR.")

    def select_photo_files(self):
        filetypes = (('Image files', '*.jpeg;*.jpg;*.png;*.bmp;*.gif'), ('All files', '*.*'))
        filenames = filedialog.askopenfilenames(title='Select images for Photo Editing', filetypes=filetypes)
        if filenames:
            self.filenames.extend(filenames)
            messagebox.showinfo("Files Selected", f"{len(filenames)} files selected for Photo Editing.")
            logging.info(f"Selected files for Photo Editing: {self.filenames}")
        else:
            messagebox.showinfo("No Files Selected", "Please select at least one image file for Photo Editing.")

    def select_pdf_files_to_merge(self):
        filetypes = (('PDF files', '*.pdf'), ('All files', '*.*'))
        filenames = filedialog.askopenfilenames(title='Select PDF files to merge', filetypes=filetypes)
        if filenames:
            self.filenames.extend(filenames)
            messagebox.showinfo("Files Selected", f"{len(filenames)} PDF files selected for merging.")
            logging.info(f"Selected PDF files for merging: {self.filenames}")
        else:
            messagebox.showinfo("No Files Selected", "Please select at least one PDF file to merge.")

    def preview_images_to_pdf(self):
        self.canvas_images_to_pdf.delete("all")
        self.images.clear()
        x_position = 10
        row_count = 0
        col_count = 0
        max_col = 4  # Maximum images per row
        for index, filename in enumerate(self.filenames):
            img = Image.open(filename)
            img.thumbnail((200, 200))  # Increased size of thumbnail
            tk_img = ImageTk.PhotoImage(img)
            self.images.append(tk_img)
            image_id = self.canvas_images_to_pdf.create_image(x_position, 10 + row_count * 220, anchor='nw', image=tk_img)
            cross_id = self.canvas_images_to_pdf.create_rectangle(x_position + 180, 10 + row_count * 220, x_position + 200, 30 + row_count * 220, fill="royal blue", tags="delete")
            text_id = self.canvas_images_to_pdf.create_text(x_position + 190, 20 + row_count * 220, text="X", font=('Arial', 12, 'bold'), fill="white", tags="delete")
            self.image_widgets[cross_id] = filename
            self.image_widgets[text_id] = filename
            self.canvas_images_to_pdf.tag_bind("delete", "<Button-1>", self.remove_image)
            col_count += 1
            if col_count >= max_col:
                col_count = 0
                row_count += 1
                x_position = 10
            else:
                x_position += 220  # Increased spacing between images

    def remove_image(self, event):
        items = self.canvas_images_to_pdf.find_withtag(tk.CURRENT)
        if items:
            item = items[0]
            filename = self.image_widgets.get(item)
            if filename:
                self.filenames.remove(filename)
                self.preview_images_to_pdf()

    def convert_to_pdf(self):
        if not self.filenames:
            messagebox.showinfo("Error", "No files selected. Please select images first.")
            return
        try:
            images = [Image.open(file).convert('RGB') for file in self.filenames]
            save_path = filedialog.asksaveasfilename(defaultextension='.pdf', filetypes=[('PDF file', '*.pdf')])
            if not save_path:
                messagebox.showinfo("Cancelled", "PDF creation cancelled.")
                return
            images[0].save(save_path, save_all=True, append_images=images[1:])
            messagebox.showinfo("Success", f"PDF successfully created and saved as {save_path}!")
            logging.info(f"PDF created successfully: {save_path}")
        except Exception as e:
            logging.error(f"Error during PDF creation: {str(e)}")
            messagebox.showinfo("Error", "Failed to create PDF. Check the log for details.")

    def select_pdf_file(self):
        pdf_path = filedialog.askopenfilename(title='Select a PDF file', filetypes=[('PDF files', '*.pdf')])
        if pdf_path:
            messagebox.showinfo("File Selected", f"Selected PDF file: {pdf_path}")
            logging.info(f"Selected PDF file: {pdf_path}")
            self.pdf_path = pdf_path
        else:
            messagebox.showinfo("No File Selected", "Please select a PDF file.")

    def convert_pdf_to_word(self):
        if not hasattr(self, 'pdf_path') or not self.pdf_path:
            messagebox.showinfo("Error", "No PDF file selected. Please select a PDF file first.")
            return

        save_path = filedialog.asksaveasfilename(defaultextension='.docx', filetypes=[('Word file', '*.docx')])
        if not save_path:
            messagebox.showinfo("Cancelled", "Word file creation cancelled.")
            return

        try:
            cv = Converter(self.pdf_path)
            cv.convert(save_path, start=0, end=None)
            cv.close()
            messagebox.showinfo("Success", f"Word document successfully created and saved as {save_path}!")
            logging.info(f"Word document created successfully: {save_path}")
        except Exception as e:
            logging.error(f"Error during Word file creation: {str(e)}")
            messagebox.showinfo("Error", "Failed to create Word document. Check the log for details.")

    def perform_ocr(self):
        if not self.filenames:
            messagebox.showinfo("Error", "No files selected. Please select images first.")
            return

        try:
            reader = easyocr.Reader(['en'])
            all_texts = []
            for filename in self.filenames:
                results = reader.readtext(filename)
                text = '\n'.join([line[1] for line in results])
                all_texts.append(f"Text from {filename}:\n{text}\n\n")
            final_text = "OCR Results:\n\n" + "\n".join(all_texts)
            messagebox.showinfo("OCR Results", final_text)
            logging.info(final_text)
        except Exception as e:
            logging.error(f"Error during OCR: {str(e)}")
            messagebox.showinfo("Error", "Failed to perform OCR. Check the log for details.")

    def apply_filters(self):
        if not self.filenames:
            messagebox.showinfo("Error", "No files selected. Please select images first.")
            return

        try:
            for filename in self.filenames:
                img = Image.open(filename)
                # Apply selected filters here
                save_path = filedialog.asksaveasfilename(defaultextension='.png', filetypes=[('PNG file', '*.png')])
                if not save_path:
                    messagebox.showinfo("Cancelled", "Filter applying cancelled.")
                    return
                img.save(save_path)
            messagebox.showinfo("Success", "Images filtered and saved.")
            logging.info("Images filtered and saved.")
        except Exception as e:
            logging.error(f"Error during filter applying: {str(e)}")
            messagebox.showinfo("Error", "Failed to apply filters. Check the log for details.")

    def merge_pdfs(self):
        if not self.filenames:
            messagebox.showinfo("Error", "No PDF files selected for merging. Please select PDF files first.")
            return

        merged_pdf_path = filedialog.asksaveasfilename(defaultextension='.pdf', filetypes=[('PDF file', '*.pdf')])
        if not merged_pdf_path:
            messagebox.showinfo("Cancelled", "PDF merging cancelled.")
            return

        try:
            pdf_merger = PdfMerger()
            for pdf_file in self.filenames:
                pdf_merger.append(pdf_file)
            pdf_merger.write(merged_pdf_path)
            pdf_merger.close()
            messagebox.showinfo("Success", f"PDF files merged successfully and saved as {merged_pdf_path}!")
            logging.info(f"PDF files merged successfully: {merged_pdf_path}")
        except Exception as e:
            logging.error(f"Error during PDF merging: {str(e)}")
            messagebox.showinfo("Error", "Failed to merge PDF files. Check the log for details.")

    def select_pdf_file_for_ai(self):
        pdf_path = filedialog.askopenfilename(title='Select a PDF file for AI processing', filetypes=[('PDF files', '*.pdf')])
        if pdf_path:
            messagebox.showinfo("File Selected", f"Selected PDF file: {pdf_path}")
            logging.info(f"Selected PDF file for AI: {pdf_path}")
            self.pdf_path_for_ai = pdf_path
        else:
            messagebox.showinfo("No File Selected", "Please select a PDF file for AI processing.")

    
    def initialize_ai_model(self):
        try:
            self.nlp = pipeline("question-answering")
            logging.info("NLP model initialized successfully.")
        except Exception as e:
            logging.error(f"Failed to initialize NLP model: {str(e)}")
            messagebox.showerror("Initialization Error", "Failed to initialize AI model. See log for details.")

    
    
    def ask_pdf_question(self):
        if not hasattr(self, 'pdf_path_for_ai') or not self.pdf_path_for_ai:
            messagebox.showinfo("Error", "No PDF file selected for AI processing. Please select a PDF file first.")
            return

        question = simpledialog.askstring("Ask Question", "Enter your question:")
        if not question:
            messagebox.showinfo("No Question", "Please enter a question to ask.")
            return

        try:
            # Open the PDF with fitz
            doc = fitz.open(self.pdf_path_for_ai)
            pdf_text = ""
            for page in doc:
                pdf_text += page.get_text()

            if not pdf_text.strip():  # Checking if the extracted text is not just whitespace
                messagebox.showinfo("Error", "No text could be extracted from the PDF.")
                return

            # Perform the AI question answering
            result = self.nlp(question=question, context=pdf_text)
            answer = result['answer']
            messagebox.showinfo("AI Answer", f"Question: {question}\nAnswer: {answer}")
            logging.info(f"AI question answered: {question} -> {answer}")
        except Exception as e:
            logging.error(f"Error during AI processing: {str(e)}")
            messagebox.showinfo("Error", "Failed to process question using AI. Check the log for details.")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, filename='app.log', format='%(asctime)s - %(levelname)s - %(message)s')
    app = ImageToPDFConverter()
    app.mainloop()
